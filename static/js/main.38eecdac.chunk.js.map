{"version":3,"sources":["reportWebVitals.js","components/Cards/Card.js","components/Cards/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","name","email","id","className","src","alt","CardList","robotsToDisplay","map","username","SearchBox","onRobotSearch","type","placeholder","onChange","value","target","Scroll","children","style","overflowY","marginTop","borderTop","height","App","useState","robotSearch","setRobotSearch","robots","setRobots","useEffect","a","fetch","response","json","robotsFetched","fetchRobots","filteredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,4CCJC,SAASQ,EAAT,GAAoC,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,MAAOC,EAAM,EAANA,GAC1C,OACE,sBAAKC,UAAU,sDAAf,UACE,qBAAKC,IAAG,+BAA0BF,EAA1B,iBAA6CG,IAAI,WACzD,gCACE,6BAAKL,IACL,4BAAIC,UCNG,SAASK,EAAT,GAAwC,IAApBC,EAAmB,EAAnBA,gBACjC,OACE,qBAAKJ,UAAU,kBAAf,SACGI,EAAgBC,KAAI,YAAoC,IAAjCN,EAAgC,EAAhCA,GAAIO,EAA4B,EAA5BA,SAAUT,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC1C,OACE,cAAC,EAAD,CAEEC,GAAIA,EACJF,KAAMA,EACNS,SAAUA,EACVR,MAAOA,GAJFC,QCPF,SAASQ,EAAT,GAAuC,IAAlBC,EAAiB,EAAjBA,cAMlC,OACE,qBAAKR,UAAU,MAAf,SACE,uBACEA,UAAU,mCACVS,KAAK,SACLC,YAAY,mBACZC,SAXe,SAAC,GAAgB,IAC5BC,EAD2B,EAAbC,OACdD,MACRJ,EAAcI,Q,MCHH,SAASE,EAAT,GAA+B,IAAbC,EAAY,EAAZA,SAC/B,OACE,qBACEC,MAAO,CACLC,UAAW,SACXC,UAAW,OACXC,UAAW,kBACXC,OAAQ,SALZ,SAQGL,ICNQ,SAASM,IAAO,IAAD,EACUC,mBAAS,IADnB,mBACrBC,EADqB,KACRC,EADQ,OAEAF,mBAAS,IAFT,mBAErBG,EAFqB,KAEbC,EAFa,KAI5BC,qBAAU,YACS,uCAAG,8BAAAC,EAAA,sEACKC,MACrB,8CAFgB,cACZC,EADY,gBAIUA,EAASC,OAJnB,OAIZC,EAJY,OAKlBN,EAAUM,GALQ,2CAAH,qDAOjBC,KACC,IAEH,IAIMC,EAAiBT,EAAOU,QAAO,SAACC,GAAD,OACnCA,EAAMvC,KAAKwC,cAAcC,SAASf,EAAYc,kBAGhD,OAAQZ,EAAOc,OAGb,sBAAKvC,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,yBACA,cAACO,EAAD,CAAWC,cAbW,SAAC4B,GACzBZ,EAAeY,MAab,cAACtB,EAAD,UACE,cAACX,EAAD,CAAUC,gBAAiB8B,SAN/B,oBAAIlC,UAAU,QAAd,wBCvBJwC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BzD,M","file":"static/js/main.38eecdac.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport './Card.css';\r\n\r\nexport default function Card({ name, email, id }) {\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5\">\r\n      <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\" />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nexport default function CardList({ robotsToDisplay }) {\r\n  return (\r\n    <div className=\"center w-80 mv3\">\r\n      {robotsToDisplay.map(({ id, username, name, email }) => {\r\n        return (\r\n          <Card\r\n            key={id}\r\n            id={id}\r\n            name={name}\r\n            username={username}\r\n            email={email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function SearchBox({ onRobotSearch }) {\r\n  const handleSearch = ({ target }) => {\r\n    const { value } = target;\r\n    onRobotSearch(value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"Search robots...\"\r\n        onChange={handleSearch}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Scroll({ children }) {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: 'scroll',\r\n        marginTop: '16px',\r\n        borderTop: '1px solid green',\r\n        height: '800px',\r\n      }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport CardList from '../components/Cards/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\n\r\nexport default function App() {\r\n  const [robotSearch, setRobotSearch] = useState('');\r\n  const [robots, setRobots] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchRobots = async () => {\r\n      const response = await fetch(\r\n        'https://jsonplaceholder.typicode.com/users'\r\n      );\r\n      const robotsFetched = await response.json();\r\n      setRobots(robotsFetched);\r\n    };\r\n    fetchRobots();\r\n  }, []);\r\n\r\n  const handleRobotSearch = (robot) => {\r\n    setRobotSearch(robot);\r\n  };\r\n\r\n  const filteredRobots = robots.filter((robot) =>\r\n    robot.name.toLowerCase().includes(robotSearch.toLowerCase())\r\n  );\r\n\r\n  return !robots.length ? (\r\n    <h1 className=\"tc f1\">Loading...</h1>\r\n  ) : (\r\n    <div className=\"tc\">\r\n      <h1 className=\"f1\">Robofriends</h1>\r\n      <SearchBox onRobotSearch={handleRobotSearch} />\r\n      <Scroll>\r\n        <CardList robotsToDisplay={filteredRobots} />\r\n      </Scroll>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport App from './containers/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}